dirData = dir('*.csv');
% 'C:\Users\jomtz7\Box Sync\Snowflake X Phase III\1-Phase III\1-FlightTests\06-17_Swope'
% dirData = dir('*.csv');
% this function will plot the altitude for all payload log files in a given
% directory, typically this function is run as a first-pass data reduction
% technique which allows all files which do not have valid altitude data to
% be eliminated from further analysis

% NOTE:  this file uses the more old-fashioned way to read in a data file
% (does not use the Matlab table structure) but it works so it is not being
% modified at this point, a future exercise could involve rewriting this
% script using some of the other utilities in this folder to clean up the
% code

for(i=1:1:length(dirData))
    close all
    clearvars -except dirData i
    
    %filename = uigetfile('*.csv');
    filename = dirData(i).name;
    delimiter = ',';
    startRow = 2;
    % ---------- Butter Filter variables ------------
    Fs = 100; % 100 Hz sampling loop
    Fc = 0.72; %
    wn = Fc/(Fs/2);
    [b2,a2] = butter(4,wn); % 4th Order LP butterworth filter
    %filename = uigetfile('*.csv');


%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\jomtz7\Box Sync\Snowflake X Phase III\1-Phase III\1-FlightTests\2018\07-CampRoberts\Payload2\LogFiles\payload2-CampRoberts-Friday-071318-UMKC-30ft2-multistepinput_Jul_13_08_25_04-0.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/07/18 14:47:08

%% Initialize variables.
% filename = 'C:\Users\jomtz7\Box Sync\Snowflake X Phase III\1-Phase III\1-FlightTests\2018\07-CampRoberts\Payload2\LogFiles\payload2-CampRoberts-Friday-071318-UMKC-30ft2-multistepinput_Jul_13_08_25_04-0.csv';
 delimiter = ',';
% startRow = 2;

%% Format for each line of text:
%   column1: categorical (%C)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
%   column43: double (%f)
%	column44: double (%f)
%   column45: double (%f)
%	column46: double (%f)
%   column47: double (%f)
%	column48: double (%f)
%   column49: double (%f)
%	column50: double (%f)
%   column51: double (%f)
%	column52: double (%f)
%   column53: double (%f)
%	column54: double (%f)
%   column55: double (%f)
%	column56: double (%f)
%   column57: double (%f)
%	column58: double (%f)
%   column59: double (%f)
%	column60: double (%f)
%   column61: double (%f)
%	column62: double (%f)
%   column63: double (%f)
%	column64: categorical (%C)
%   column65: categorical (%C)
%	column66: double (%f)
%   column67: double (%f)
%	column68: double (%f)
%   column69: double (%f)
%	column70: double (%f)
%   column71: double (%f)
%	column72: double (%f)
%   column73: double (%f)
%	column74: double (%f)
%   column75: double (%f)
%	column76: double (%f)
%   column77: double (%f)
%	column78: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%C%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%C%C%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

    %% Convert the contents of columns containing numeric text to numbers.
    % Replace non-numeric text with NaN.
    % --> This doesn't work at all anymore <--
%     raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
%     for col=1:length(dataArray)-1
%         raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
%     end
%     numericData = NaN(size(dataArray{1},1),size(dataArray,2));
% 
%     for col=[1,2]
%         % Converts text in the input cell array to numbers. Replaced non-numeric
%         % text with NaN.
%         rawData = dataArray{col};
%         for row=1:size(rawData, 1)
%             % Create a regular expression to detect and remove non-numeric prefixes and
%             % suffixes.
%             regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
%             try
%                 result = regexp(rawData(row), regexstr, 'names');
%                 numbers = result.numbers;
% 
%                 % Detected commas in non-thousand locations.
%                 invalidThousandsSeparator = false;
%                 if numbers.contains(',')
%                     thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
%                     if isempty(regexp(numbers, thousandsRegExp, 'once'))
%                         numbers = NaN;
%                         invalidThousandsSeparator = true;
%                     end
%                 end
%                 % Convert numeric text to numbers.
%                 if ~invalidThousandsSeparator
%                     numbers = textscan(char(strrep(numbers, ',', '')), '%f');
%                     numericData(row, col) = numbers{1};
%                     raw{row, col} = numbers{1};
%                 end
%             catch
%                 raw{row, col} = rawData{row};
%             end
%         end
%     end
% 
%     %% Replace non-numeric cells with NaN
%     R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
%     raw(R) = {NaN}; % Replace non-numeric cells

    %% Allocate imported array to column variable names
%     microseconds_since_start = cell2mat(raw(:, 2));
%     msl_gps = cell2mat(raw(:, ));
%     input = cell2mat(raw(:,46));
%     output = cell2mat(raw(:,36));
     time = dataArray{:,2};
     yaw_rate = dataArray{:, 36}; % g_mpu2
     yawr_fil = filtfilt(b2,a2,yaw_rate);
     input = dataArray{:, 46}; % winch_right_cmd
%    winch_left_cmd = dataArray{:, 47};
     control_type = dataArray{:, 64};
     heading_type = dataArray{:, 65};
     Nmax = dataArray{:, 76};
     N = dataArray{:, 77};
     period = dataArray{:, 78};
%% Create output variable
payload2CampRobertsFriday071318UMKC30ft2multistepinputJul130825 = table(dataArray{1:end-1}, 'VariableNames', {'today','microseconds_since_start','msl','rc0','rc1','rc2','rc3','rc4','rc5','rc0_scaled','rc1_scaled','rc2_scaled','rc3_scaled','rc4_scaled','rc5_scaled','roll_mpu_mahony','pitch_mpu_mahony','yaw_mpu_mahony','roll_lsm_mahony','pitch_lsm_mahony','yaw_lsm_mahony','roll_mpu_madgwick','pitch_mpu_madgwick','yaw_mpu_madgwick','roll_lsm_madgwick','pitch_lsm_madgwick','yaw_lsm_madgwick','a_mpu0','a_mpu1','a_mpu2','a_lsm0','a_lsm1','a_lsm2','g_mpu0','g_mpu1','g_mpu2','g_lsm0','g_lsm1','g_lsm2','m_mpu0','m_mpu1','m_mpu2','m_lsm0','m_lsm1','m_lsm2','winch_right_cmd','winch_left_cmd','yaw_integrated_mpu','yaw_integrated_lsm','A','B','C','wn','zeta','kp','ki','kd','yaw_desired','yaw_error','yaw_error_previous','yaw_error_rate','yaw_error_sum','adc_array5','control_type','heading_type','time_gps','lat','lng','alt_ellipsoid','msl_gps','horz_accuracy','vert_accuracy','status_gps','lat_waypoint','lng_waypoint','Nmax','N','period'});

%% Clear temporary variables
clearvars delimiter startRow formatSpec fileID dataArray ans; % remove 'filename'--> fixed "Undefined variable" error
    %% Clear temporary variables
    %clearvars delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp R;

    save_filename = filename;
    save_filename = save_filename(1:end-4);
    save_step = strcat(save_filename,'-yaw');

    plot(input-1.5)
    yyaxis right
    plot(yawr_fil)
    fig = gcf;
    saveas(fig,char(save_step));

    fig.PaperUnits = 'inches';
    fig.PaperPosition = [0 0 6 6];

    saveas(fig,char(save_step),'png');
     
end